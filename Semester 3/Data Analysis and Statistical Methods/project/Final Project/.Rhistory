#perform t-test
t_result_summer_vs_all <- t.test(summer_CO2_60,all_CO2_60, alternative = "greater", conf.level = 0.95, var.equal = TRUE, paired = FALSE)
t_result_summer_vs_all
t_alpha <- qt (0.95 , t_result_summer_vs_all$parameter)
t_alpha
t_alpha <- qt (0.95 , t_result_summer_vs_all$parameter, lower.tail = TRUE)
t_alpha
t_alpha <- qt (0.95 , t_result_summer_vs_all$parameter, lower.tail = FALSE)
t_alpha
t_alpha <- qt (0.95 , t_result_summer_vs_all$parameter, lower.tail = TRUE)
t_alpha
#perform t-test
t_result_summer_vs_all <- t.test(all_CO2_60,summer_CO2_60, alternative = "greater", conf.level = 0.95, var.equal = TRUE, paired = FALSE)
t_result_summer_vs_all
t_alpha <- qt (0.95 , t_result_summer_vs_all$parameter)
t_alpha
t_alpha <- qt (0.95 , t_result_summer_vs_all$parameter, lower.tail = FALSE)
t_alpha
t_alpha <- qt (0.95 , t_result_summer_vs_all$parameter, lower.tail = TRUE)
t_alpha
t_result_winter_vs_all <- t.test(all_CO2_60,winter_CO2_60, alternative = "greater", conf.level = 0.95, var.equal = TRUE, paired = FALSE)
#perform t-test on winter data
t_result_winter_vs_all <- t.test(all_CO2_60,winter_CO2_60, alternative = "greater", conf.level = 0.95, var.equal = TRUE, paired = FALSE)
#Statistical methods
library(dplyr)
library(ggplot2)
#a. t-test
#get data
#all data
all_CO2_60 <- df %>%  select(CO2_60)
#CO2 60 metres
summer_CO2_60 <- df %>% filter(season == "summer") %>% select(CO2_60)
winter_CO2_60 <- df %>% filter(season == "winter") %>% select(CO2_60)
autumn_CO2_60 <- df %>% filter(season == "autumn") %>% select(CO2_60)
spring_CO2_60 <- df %>% filter(season == "spring") %>% select(CO2_60)
#CO2 7 metres
summer_CO2_07 <- df %>% filter(season == "summer") %>% select(CO2_7)
winter_CO2_07 <- df %>% filter(season == "winter") %>% select(CO2_7)
autumn_CO2_07 <- df %>% filter(season == "autumn") %>% select(CO2_7)
spring_CO2_07 <- df %>% filter(season == "spring") %>% select(CO2_7)
#summary of CO2 60 metres per season
summary_summer_CO2_60 <- df %>%select(CO2_60, CO2_7, season) %>% group_by(season)%>% summarise ( avg_CO2_60 = mean (CO2_60) , sd_CO2_60 =sd (CO2_60), avg_CO2_07 = mean (CO2_7) , sd_CO2_07 =sd (CO2_7))
#get the value of Ttable
t_alpha <- qt (0.95 , t_result_summer_vs_all$parameter, lower.tail = TRUE)
#perform t-test on summer data
t_result_summer_vs_all <- t.test(all_CO2_60,summer_CO2_60, alternative = "greater", conf.level = 0.95, var.equal = TRUE, paired = FALSE)
#perform t-test on winter data
t_result_winter_vs_all <- t.test(all_CO2_60,winter_CO2_60, alternative = "greater", conf.level = 0.95, var.equal = TRUE, paired = FALSE)
#reject H0 if the Ttest > TTable
t_result_winter_vs_all
t_result_spring_vs_all <- t.test(all_CO2_60,spring_CO2_60, alternative = "greater", conf.level = 0.95, var.equal = TRUE, paired = FALSE)
t_result_spring_vs_all
#perform t-test on summer data
t_result_summer_vs_all <- t.test(all_CO2_60,summer_CO2_60, alternative = "greater", conf.level = 0.95, var.equal = TRUE, paired = FALSE)
t_result_summer_vs_all
#perform t-test on spring data
t_result_autumn_vs_all <- t.test(all_CO2_60,autumn_CO2_60, alternative = "greater", conf.level = 0.95, var.equal = TRUE, paired = FALSE)
t_result_autumn_vs_all
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~season, data=df)
install.packages("GGally")
install.packages("lmodel2")
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~season, data=df)
z
summary(z)
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~datetime, data=df)
summary(z)
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~monthname, data=df)
summary(z)
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~mon, data=df)
summary(z)
library(dplyr)
library(plyr)
library(ggplot2)
#load dataframe and omit values that contain NA
df <- na.omit(read.csv("data8(1).csv"))
#rename the column
df <- rename(df,c("COS.60" = "COS_60", "CO2.60" = "CO2_60",
"CO.60" = "CO_60", "H2O.60" = "H2O_60",
"COS.7" = "COS_7","CO2.7" = "CO2_7",
"CO.7" = "CO_7","H2O.7" = "H2O_7"))
#construct all variables of date into a single string
str_dateformat <- "%d-%m-%Y %H:%M:%S"
str_date <- paste(df$day,df$mon,df$yr, sep = "-")
str_time <- paste(df$hr,0,0, sep = ":")
str_datetime <- paste(str_date,str_time,sep = " ")
#add new datetime variable to data frame
df$datetime = as.POSIXct(str_datetime, format=str_dateformat)
#add column season to group the record by season
df$season <- ifelse(df$mon %in% c(1,2,12),"winter",
ifelse(df$mon %in% 3:5, "spring",
ifelse(df$mon %in% 6:8, "summer", "autumn")))
df$seasonid <- ifelse(df$mon %in% c(1,2,12),1,
ifelse(df$mon %in% 3:5, 2,
ifelse(df$mon %in% 6:8, 3, 4))
df$monthname <- month.abb[df$mon]
library(dplyr)
library(plyr)
library(ggplot2)
#load dataframe and omit values that contain NA
df <- na.omit(read.csv("data8(1).csv"))
#rename the column
df <- rename(df,c("COS.60" = "COS_60", "CO2.60" = "CO2_60",
"CO.60" = "CO_60", "H2O.60" = "H2O_60",
"COS.7" = "COS_7","CO2.7" = "CO2_7",
"CO.7" = "CO_7","H2O.7" = "H2O_7"))
#construct all variables of date into a single string
str_dateformat <- "%d-%m-%Y %H:%M:%S"
str_date <- paste(df$day,df$mon,df$yr, sep = "-")
str_time <- paste(df$hr,0,0, sep = ":")
str_datetime <- paste(str_date,str_time,sep = " ")
#add new datetime variable to data frame
df$datetime = as.POSIXct(str_datetime, format=str_dateformat)
#add column season to group the record by season
df$season <- ifelse(df$mon %in% c(1,2,12),"winter",
ifelse(df$mon %in% 3:5, "spring",
ifelse(df$mon %in% 6:8, "summer", "autumn")))
df$seasonid <- ifelse(df$mon %in% c(1,2,12),1,
ifelse(df$mon %in% 3:5, "spring",
ifelse(df$mon %in% 6:8, "summer", "autumn")))
df$monthname <- month.abb[df$mon]
library(dplyr)
library(plyr)
library(ggplot2)
#load dataframe and omit values that contain NA
df <- na.omit(read.csv("data8(1).csv"))
#rename the column
df <- rename(df,c("COS.60" = "COS_60", "CO2.60" = "CO2_60",
"CO.60" = "CO_60", "H2O.60" = "H2O_60",
"COS.7" = "COS_7","CO2.7" = "CO2_7",
"CO.7" = "CO_7","H2O.7" = "H2O_7"))
#construct all variables of date into a single string
str_dateformat <- "%d-%m-%Y %H:%M:%S"
str_date <- paste(df$day,df$mon,df$yr, sep = "-")
str_time <- paste(df$hr,0,0, sep = ":")
str_datetime <- paste(str_date,str_time,sep = " ")
#add new datetime variable to data frame
df$datetime = as.POSIXct(str_datetime, format=str_dateformat)
#add column season to group the record by season
df$season <- ifelse(df$mon %in% c(1,2,12),"winter",
ifelse(df$mon %in% 3:5, "spring",
ifelse(df$mon %in% 6:8, "summer", "autumn")))
df$seasonid <- ifelse(df$mon %in% c(1,2,12),1,
ifelse(df$mon %in% 3:5, 2,
ifelse(df$mon %in% 6:8, 3, 4)))
df$monthname <- month.abb[df$mon]
library(dplyr)
library(plyr)
library(ggplot2)
#load dataframe and omit values that contain NA
df <- na.omit(read.csv("data8(1).csv"))
#rename the column
df <- rename(df,c("COS.60" = "COS_60", "CO2.60" = "CO2_60",
"CO.60" = "CO_60", "H2O.60" = "H2O_60",
"COS.7" = "COS_7","CO2.7" = "CO2_7",
"CO.7" = "CO_7","H2O.7" = "H2O_7"))
#construct all variables of date into a single string
str_dateformat <- "%d-%m-%Y %H:%M:%S"
str_date <- paste(df$day,df$mon,df$yr, sep = "-")
str_time <- paste(df$hr,0,0, sep = ":")
str_datetime <- paste(str_date,str_time,sep = " ")
#add new datetime variable to data frame
df$datetime = as.POSIXct(str_datetime, format=str_dateformat)
#add column season to group the record by season
df$season <- ifelse(df$mon %in% c(1,2,12),"winter",
ifelse(df$mon %in% 3:5, "spring",
ifelse(df$mon %in% 6:8, "summer", "autumn")))
df$seasonid <- ifelse(df$mon %in% c(1,2,12),1,
ifelse(df$mon %in% 3:5, 2,
ifelse(df$mon %in% 6:8, 3, 4)))
#df$monthname <- month.abb[df$mon]
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~seasonid, data=df)
summary(z)
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~seasonid, data=df)
summary(z)
#plot lm
df$y_error_upper = df$CO2_60 + 3 * sd(df$CO2_60)/5
df$y_error_lower = df$CO2_60 - sd(df$CO2_60)/5
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~seasonid, data=df)
summary(z)
#plot lm
df$y_error_upper = df$CO2_60 + 3 * sd(df$CO2_60)/5
df$y_error_lower = df$CO2_60 - sd(df$CO2_60)/5
ggplot(df, aes(x=seasonid, y=CO2_60)) +
geom_point() +
geom_errorbar(aes(ymin = y_error_lower,
ymax = y_error_upper,
width=0.3))
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~seasonid, data=df)
summary(z)
#plot lm
ggplot(df, aes(x=seasonid, y=CO2_60)) +
geom_point()
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~seasonid, data=df)
summary(z)
#plot lm
ggplot(df, aes(x=datetime, y=CO2_60)) +
geom_point()
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~datetime, data=df)
summary(z)
#plot lm
ggplot(df, aes(x=datetime, y=CO2_60)) +
geom_point()
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~datetime, data=df)
summary(z)
#plot lm
ggplot(df, aes(x=datetime, y=CO2_60)) + geom_point() +
geom_abline(intercept = z$coefficients[1],  # but add in the regression line
slope = z$coefficients[2])
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~datetime, data=df)
summary(z)
#plot lm
ggplot(df, aes(x=datetime, y=CO2_60)) + geom_point() +
geom_abline(intercept = z$coefficients[1],  # but add in the regression line
slope = z$coefficients[2])
df1$fit = fitted(z)
df1$res = residuals(z)
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~datetime, data=df)
summary(z)
#plot lm
ggplot(df, aes(x=datetime, y=CO2_60)) + geom_point() +
geom_abline(intercept = z$coefficients[1],  # but add in the regression line
slope = z$coefficients[2])
df$fit = fitted(z)
df$res = residuals(z)
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~datetime, data=df)
summary(z)
#plot lm
ggplot(df, aes(x=datetime, y=CO2_60)) + geom_point() +
geom_abline(intercept = z$coefficients[1],  # but add in the regression line
slope = z$coefficients[2])
df$fit = fitted(z)
df$res = residuals(z)
ggplot(anscombe1) +
geom_point(aes(x=datetime, y=CO2_60, color="original value"), size=3) +
geom_point(aes(x=datetime, y=CO2_60, color="fitted value"), size=3) +
geom_abline(intercept = z$coefficients[1], slope=z$coefficients[2])
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~datetime, data=df)
summary(z)
#plot lm
ggplot(df, aes(x=datetime, y=CO2_60)) + geom_point() +
geom_abline(intercept = z$coefficients[1],  # but add in the regression line
slope = z$coefficients[2])
df$fit = fitted(z)
df$res = residuals(z)
ggplot(df) +
geom_point(aes(x=datetime, y=CO2_60, color="original value"), size=3) +
geom_point(aes(x=datetime, y=CO2_60, color="fitted value"), size=3) +
geom_abline(intercept = z$coefficients[1], slope=z$coefficients[2])
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~datetime, data=df)
summary(z)
#plot lm
ggplot(df, aes(x=datetime, y=CO2_60)) + geom_point() +
geom_abline(intercept = z$coefficients[1],  # but add in the regression line
slope = z$coefficients[2])
df$fit = fitted(z)
df$res = residuals(z)
ggplot(df) +
geom_point(aes(x=datetime, y=CO2_60, color="original value"), size=3) +
geom_point(aes(x=datetime, y=CO2_60, color="fitted value"), size=3) +
geom_abline(intercept = z$coefficients[1], slope=z$coefficients[2])
ggplot(df) +
geom_point(aes(x=datetime, y=res))
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~datetime, data=df)
summary(z)
#plot lm
ggplot(df, aes(x=datetime, y=CO2_60)) + geom_point() +
geom_abline(intercept = z$coefficients[1],  # but add in the regression line
slope = z$coefficients[2])
df$fit = fitted(z)
df$res = residuals(z)
ggplot(df) +
geom_point(aes(x=datetime, y=CO2_60, color="original value"), size=3) +
geom_point(aes(x=datetime, y=CO2_60, color="fitted value"), size=3) +
geom_abline(intercept = z$coefficients[1], slope=z$coefficients[2])
#res vs datetime
ggplot(df) +
geom_point(aes(x=datetime, y=res))
#res vs fitted
ggplot(df, aes(x=datetime, y=res)) + geom_point() + ggtitle("residual vs. fitted values")
#res vs fitted
ggplot(df, aes(x=fit, y=res)) + geom_point() + ggtitle("residual vs. fitted values")
#plot qqnorm
qqnorm(df$res)
qqline(df$res)
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~seasonid, data=df)
summary(z)
df$fit = fitted(z)
df$res = residuals(z)
#plot qqnorm
qqnorm(df$res)
qqline(df$res)
#res vs fitted
ggplot(df, aes(x=fit, y=res)) + geom_point() + ggtitle("residual vs. fitted values")
#mthod 2 - linear model
#Statistical methods
library(dplyr)
library(ggplot2)
library(GGally)
library(lmodel2)
z = lm(CO2_60~datetime, data=df)
summary(z)
#plot lm
ggplot(df, aes(x=datetime, y=CO2_60)) + geom_point() +
geom_abline(intercept = z$coefficients[1],  # but add in the regression line
slope = z$coefficients[2])
df$fit = fitted(z)
df$res = residuals(z)
ggplot(df) +
geom_point(aes(x=datetime, y=CO2_60, color="original value"), size=3) +
geom_point(aes(x=datetime, y=CO2_60, color="fitted value"), size=3) +
geom_abline(intercept = z$coefficients[1], slope=z$coefficients[2])
#res vs datetime
ggplot(df) +
geom_point(aes(x=datetime, y=res))
#res vs fitted
ggplot(df, aes(x=fit, y=res)) + geom_point() + ggtitle("residual vs. fitted values")
#plot qqnorm
qqnorm(df$res)
qqline(df$res)
ggplot(df, aes( x= factor(season) , y=CO2_60))+geom_boxplot()
#qqplot
rnorm_CO2_60 <- rnorm(df$CO2_60)
qqnorm(rnorm_CO2_60)
qqline(rnorm_CO2_60)
rnorm_CO2_7 <- rnorm(df$CO2_7)
qqnorm(rnorm_CO2_7)
qqline(rnorm_CO2_7)
setwd("/home/frans/Desktop/Kuliah/Semester 3/Data Analysis and Statistical Methods/Assignments/Assignment 6")
library(tidyverse)
library(forecast)
setwd("/home/frans/Desktop/Kuliah/Semester 3/Data Analysis and Statistical Methods/Assignments/Assignment 6")
df <- read.csv(file = "Pr_20May1(1).csv", header = TRUE)
#rename the column
names(df)[1]<-"temperature"
#create a squence month from 1946 to december 2014
df$t = seq(from = as.Date("1946-01-01"), to = as.Date("2014-12-31"), by="1 month")
#time series
t_ser <- ts(df$temperature, start = c(1946, 1),end = c(2014, 12), freq = 12)
#decompose the time series using stl
output = stl(t_ser, s.window = 25, t.window = (1.5 * 12)/(1 - 1/12))
#plot the time series decompostion using stl
plot(output)
library(tidyverse)
library(forecast)
setwd("/home/frans/Desktop/Kuliah/Semester 3/Data Analysis and Statistical Methods/Assignments/Assignment 6")
df <- read.csv(file = "Pr_20May1(1).csv", header = TRUE)
#rename the column
names(df)[1]<-"temperature"
#create a squence month from 1946 to december 2014
df$t = seq(from = as.Date("1946-01-01"), to = as.Date("2014-12-31"), by="1 month")
#time series
t_ser <- ts(df$temperature, start = c(1946, 1),end = c(2014, 12), freq = 12)
#decompose the time series using stl
output = stl(t_ser, t.window = (1.5 * 12)/(1 - 1/12))
#plot the time series decompostion using stl
plot(output)
library(tidyverse)
library(forecast)
setwd("/home/frans/Desktop/Kuliah/Semester 3/Data Analysis and Statistical Methods/Assignments/Assignment 6")
df <- read.csv(file = "Pr_20May1(1).csv", header = TRUE)
#rename the column
names(df)[1]<-"temperature"
#create a squence month from 1946 to december 2014
df$t = seq(from = as.Date("1946-01-01"), to = as.Date("2014-12-31"), by="1 month")
#time series
t_ser <- ts(df$temperature, start = c(1946, 1),end = c(2014, 12), freq = 12)
#decompose the time series using stl
output = stl(t_ser, s.window = 12, t.window = (1.5 * 12)/(1 - 1/12))
#plot the time series decompostion using stl
plot(output)
library(tidyverse)
library(forecast)
setwd("/home/frans/Desktop/Kuliah/Semester 3/Data Analysis and Statistical Methods/Assignments/Assignment 6")
df <- read.csv(file = "Pr_20May1(1).csv", header = TRUE)
#rename the column
names(df)[1]<-"temperature"
#create a squence month from 1946 to december 2014
df$t = seq(from = as.Date("1946-01-01"), to = as.Date("2014-12-31"), by="1 month")
#time series
t_ser <- ts(df$temperature, start = c(1946, 1),end = c(2014, 12), freq = 12)
#decompose the time series using stl
output = stl(t_ser, s.window = 25, t.window = (1.5 * 12)/(1 - 1/12))
#plot the time series decompostion using stl
plot(output)
library(tidyverse)
library(forecast)
setwd("/home/frans/Desktop/Kuliah/Semester 3/Data Analysis and Statistical Methods/Assignments/Assignment 6")
df <- read.csv(file = "Pr_20May1(1).csv", header = TRUE)
#rename the column
names(df)[1]<-"temperature"
#create a squence month from 1946 to december 2014
df$t = seq(from = as.Date("1946-01-01"), to = as.Date("2014-12-31"), by="1 month")
#time series
t_ser <- ts(df$temperature, start = c(1946, 1),end = c(2014, 12), freq = 12)
#decompose the time series using stl
output = stl(t_ser, s.window = 25, t.window = (1.5 * 12)/(1 - 1/12))
#plot the time series decompostion using stl
plot(output)
